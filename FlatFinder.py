# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FlatFinder
                                 A QGIS plugin
 This plugin seeks to help when searching for an appartment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-23
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Kononow Stephan, Palka Nikolaus, Seisenbacher Daniel
        email                : a12002194@unet.univie.ac.at
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsVectorLayer, QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .FlatFinder_dialog import FlatFinderDialog
import os.path

class FlatFinder:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FlatFinder_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FlatFinder')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FlatFinder', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/FlatFinder/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'FlatFinder'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FlatFinder'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FlatFinderDialog()

        self.dlg.show()
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            print("---------------------------------------")
            print("Running FlatFinder...")

            data = {
                "socialLayer": {"combobox": self.dlg.mMapLayerComboBox_6, "slider": self.dlg.slider1},
                "leisureLayer": {"combobox": self.dlg.mMapLayerComboBox_4, "slider": self.dlg.slider4},
                "publictransportLayer": {"combobox": self.dlg.mMapLayerComboBox_3, "slider": self.dlg.slider3},
                "educationLayer": {"combobox": self.dlg.qgsMapLayerComboBox_2, "slider": self.dlg.slider2},
            }

            # get current extent
            if self.dlg.mMapLayerComboBox.currentLayer() is None:
                extent = self.iface.mapCanvas().extent()
            else:
                extent = self.dlg.mMapLayerComboBox.currentLayer().extent()

            # download OSM data based on extent
            for key, value in data.items():
                current_layer = value['combobox'].currentLayer()
                extent_dict =  {
                    "ll_lon": extent.xMinimum(),
                    "ll_lat": extent.yMinimum(),
                    "ur_lon": extent.xMaximum(),
                    "ur_lat": extent.yMaximum()
                }
                # print(extent_dict)
                # print(extent)
                if current_layer is None:
                    vlayer = get_osm_features(
                        layer=key,
                        extent_string=f"{extent_dict["ll_lat"]},{extent_dict["ll_lon"]},{extent_dict["ur_lat"]},{extent_dict["ur_lon"]}"
                    )


                    pass




def get_osm_features(layer, extent_string):
    import processing

    if layer == "leisureLayer":
        # run the file downloader for the leisureLayer, with the specified QUICKOSM query
        osm_output = processing.run("native:filedownloader", {
            'URL': f"https://overpass-api.de/api/interpreter?data=[out:xml] [timeout:25];%0A(%0A node[%22landuse%22%3D%22grass%22]( {extent_string});%0A node[%22landuse%22%3D%22forest%22]( {extent_string});%0A node[%22leisure%22%3D%22park%22]( {extent_string});%0A way[%22landuse%22%3D%22grass%22]( {extent_string});%0A way[%22landuse%22%3D%22forest%22]( {extent_string});%0A way[%22leisure%22%3D%22park%22]( {extent_string});%0A relation[%22landuse%22%3D%22grass%22]( {extent_string});%0A relation[%22landuse%22%3D%22forest%22]( {extent_string});%0A relation[%22leisure%22%3D%22park%22]( {extent_string});%0A);%0A(._;%3E;);%0Aout body;&info=QgisQuickOSMPlugin",
            'METHOD': 0, 'DATA': '', 'OUTPUT': 'TEMPORARY_OUTPUT'})
        osm_output = osm_output["OUTPUT"]

        # Load the data as a vector layer
        data_source = f"{osm_output}|layername=multipolygons"
        vlayer = QgsVectorLayer(data_source, "multipolygons", "ogr")

    elif layer == "educationLayer":
        # run the file downloader for the educationLayer, with the specified QUICKOSM query
        osm_output = processing.run("native:filedownloader", {
            'URL': f"https://overpass-api.de/api/interpreter?data=[out:xml] [timeout:25];%0A(%0A node[%22amenity%22%3D%22university%22]( {extent_string});%0A node[%22amenity%22%3D%22school%22]( {extent_string});%0A way[%22amenity%22%3D%22university%22]( {extent_string});%0A way[%22amenity%22%3D%22school%22]( {extent_string});%0A relation[%22amenity%22%3D%22university%22]( {extent_string});%0A relation[%22amenity%22%3D%22school%22]( {extent_string});%0A);%0A(._;%3E;);%0Aout body;&info=QgisQuickOSMPlugin",
            'METHOD': 0, 'DATA': '', 'OUTPUT': 'TEMPORARY_OUTPUT'})
        osm_output = osm_output["OUTPUT"]

        # Load the data as a vector layer
        data_source = f"{osm_output}|layername=points"
        vlayer = QgsVectorLayer(data_source, "points", "ogr")

    elif layer == "publictransportLayer":
        # run the file downloader for the publictransportLayer, with the specified QUICKOSM query
        osm_output = processing.run("native:filedownloader", {
            'URL': f"https://overpass-api.de/api/interpreter?data=[out:xml] [timeout:25];%0A(%0A node[%22public_transport%22%3D%22station%22]( {extent_string});%0A node[%22amenity%22%3D%22bus_station%22]( {extent_string});%0A way[%22public_transport%22%3D%22station%22]( {extent_string});%0A way[%22amenity%22%3D%22bus_station%22]( {extent_string});%0A relation[%22public_transport%22%3D%22station%22]( {extent_string});%0A relation[%22amenity%22%3D%22bus_station%22]( {extent_string});%0A);%0A(._;%3E;);%0Aout body;&info=QgisQuickOSMPlugin",
            'METHOD': 0, 'DATA': '', 'OUTPUT': 'TEMPORARY_OUTPUT'})
        osm_output = osm_output["OUTPUT"]

        # Load the data as a vector layer
        data_source = f"{osm_output}|layername=points"
        vlayer = QgsVectorLayer(data_source, "points", "ogr")

    elif layer == "socialLayer":
        # run the file downloader for the socialLayer, with the specified QUICKOSM query
        osm_output = processing.run("native:filedownloader", {
            'URL': f"https://overpass-api.de/api/interpreter?data=[out:xml] [timeout:25];%0A(%0A node[%22amenity%22%3D%22cafe%22]( {extent_string});%0A node[%22amenity%22%3D%22restaurant%22]( {extent_string});%0A node[%22amenity%22%3D%22bar%22]( {extent_string});%0A node[%22amenity%22%3D%22nightclub%22]( {extent_string});%0A way[%22amenity%22%3D%22cafe%22]( {extent_string});%0A way[%22amenity%22%3D%22restaurant%22]( {extent_string});%0A way[%22amenity%22%3D%22bar%22]( {extent_string});%0A way[%22amenity%22%3D%22nightclub%22]( {extent_string});%0A relation[%22amenity%22%3D%22cafe%22]( {extent_string});%0A relation[%22amenity%22%3D%22restaurant%22]( {extent_string});%0A relation[%22amenity%22%3D%22bar%22]( {extent_string});%0A relation[%22amenity%22%3D%22nightclub%22]( {extent_string});%0A);%0A(._;%3E;);%0Aout body;&info=QgisQuickOSMPlugin",
            'METHOD': 0, 'DATA': '', 'OUTPUT': 'TEMPORARY_OUTPUT'})
        osm_output = osm_output["OUTPUT"]

        # Load the data as a vector layer
        data_source = f"{osm_output}|layername=points"
        vlayer = QgsVectorLayer(data_source, "points", "ogr")

    else:
        print("ERROR - layer not found")

    # check validity
    if not vlayer.isValid():
        print("Layer failed to load!")
        QgsProject.instance().addMapLayer(vlayer)
    else:
        print("success")

    return vlayer

"""
for parks: 
MULTI TO SINGLEPART
processing.run("native:multiparttosingleparts", {'INPUT':'C:/Users/seise/AppData/Local/Temp/processing_ErCEMK/6194a798fcf14964bb7c0a282ab6ef1b/OUTPUT.file|layername=multipolygons','OUTPUT':'TEMPORARY_OUTPUT'})

FIX GEOMETRY
processing.run("native:fixgeometries", {'INPUT':'memory://Polygon?crs=EPSG:4326&field=osm_id:string(0,0)&field=osm_way_id:string(0,0)&field=osm_version:integer(0,0)&field=osm_timestamp:datetime(0,0)&field=osm_uid:integer(0,0)&field=osm_user:string(0,0)&field=osm_changeset:integer(0,0)&field=other_tags:string(0,0)&uid={f78ee244-ad76-4086-a9b3-d774d9b9b4ab}','METHOD':1,'OUTPUT':'TEMPORARY_OUTPUT'})

REPROJECT

RASTERIZE

SIEVE
processing.run("gdal:sieve", {'INPUT':'C:/Users/seise/AppData/Local/Temp/processing_ErCEMK/35b3a8b12611438aa4a64740b8e83675/OUTPUT.tif','THRESHOLD':10,'EIGHT_CONNECTEDNESS':False,'NO_MASK':False,'MASK_LAYER':None,'EXTRA':'','OUTPUT':'TEMPORARY_OUTPUT'})
"""


